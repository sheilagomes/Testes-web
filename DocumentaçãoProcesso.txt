Abri o STS e escolhi File > New > Maven project. Marquei a opção Create a Simple Project. Escrevi com.sheilagomes em GroupID e testes.web.multitude em ArtifactID. Abri o arquivo pom.xml do projeto. No site mvnrepository.com procurei as dependências do Junit Jupiter (Aggregator), Hamcrest e Selenium Java, selecionando as versões mais atualizadas que não eram alpha. Copiei o código das dependências no pom. Para facilitar futuras atualizações acrescentei uma tag <properties> com as versões das dependências e, dentro das dependências, usei as tags ${junit.version}, ${hamcrest.version} e ${selenium.version} para referenciar. Cliquei no JRE System Library dentro do projeto e depois em Properties para alterar a versão do JRE que está sendo usada. Em src/test/java criei um pacote base e outro homepage. No pacote homepage criei a classe HomepageTests. Dentro dela, criei a primeira anotação @Test com um método público sem retorno chamado testContarProdutos_oitoProdutosDiferentes(). Dentro dele, chamei o método carregarPaginaInicial() e a asserção assertThat(homepage.contarProdutos(), is(8));
Então fiz o apontamento para o WebDriver e para isso criei a classe BaseTests, que será referenciada para herança dentro de HomepageTests. Em BaseTests criei uma variável privada do tipo WebDriver chamada driver e uma variável protegida do tipo Homepage chamada homepage. Criei então uma anotação @BeforeAll com um método público estático e sem retorno chamado inicializar(), e dentro dele defini a propriedade de system com uma variável webdriver.chrome.driver com o valor do caminho do driver do chrome no meu computador: "/home/sheila/chromedriver/chromedriver". Daí inicializei a variável driver com o nome ChromeDriver(). Criei então uma anotação @BeforeEach com um método público e sem retorno chamado carregarPaginaInicial(). Dentro dele chamei a página "https://www.multitude.trd.br/" com driver.get. 
Daí inicializei a variável homepage com o nome Homepage e parâmetro driver. Criei a anotação @AfterAll com um método público estático e sem retorno chamado finalizar() e dentro dele chamei driver com o método quit() para fechar a página.
Em src/main/java criei o pacote pages e dentro dele a classe Homepage. Nela criei uma variável privada do tipo WebDriver chamada driver e um construtor com esta variável. Criei então um método público com retorno int chamado contarProdutos() e dentro dele chamo o método carregarListaProdutos() e retorno listaProdutos.size(). Inicializei a variável  ArrayList<WebElement>() do tipo List<WebElement> listaProdutos acima do primeiro método. Criei um método privado sem retorno chamado carregarListaProdutos(). Precisei localizar os elementos na página com a inspeção do developer tools. Acrescentei então o apontamento do elemento procurado em Homepage.java, antes dos métodos, como uma variável privada do tipo By chamada produtos igual a By.xpath("//img[contains(@class,'size-thumbnail wp-image-3214 alignright')]") usando a extensão ChroPath do Firefox. No método carregarListaProdutos() fiz a busca dos elementos na paǵina com o método findElements e o parametro produtos no driver. Fui então na classe HomepageTests para testar se estava funcionando, clicando duas vezes em testContarProdutos_oitoProdutosDiferentes() e clicando com o botão direito escolho Run as > Junit para testar. Tudo rodou como devia.
